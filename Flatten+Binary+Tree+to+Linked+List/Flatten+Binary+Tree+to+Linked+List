class Solution {//non-recursive
public:
    
    void flatten(TreeNode *root) {
    if(root==NULL)return;
    stack<struct TreeNode *> s;
     TreeNode* np = new TreeNode(root->val);
     TreeNode* result = np;
     TreeNode* temp;
    if(root->right!=NULL)
        s.push(root->right);
    if(root->left!=NULL)
        s.push(root->left);
    while(!s.empty()){
        temp = s.top();
        s.pop();
        np->right = new TreeNode (temp->val);
        np->left = NULL;
        np = np->right;
    if(temp->right!=NULL)
        s.push(temp->right);
    if(temp->left!=NULL)
        s.push(temp->left);
    }
    *root = *result;
        
    }
};








class Solution { //recursive
private:
    TreeNode* np = NULL;
public:
    
    void flatten(TreeNode *root) {
        if(root==NULL)return;


        if(np==NULL){
            np=root;
        }
        else{
            np->right=root;
            np->left=NULL;
            np=np->right;
        }

        TreeNode* right = root->right;
        flatten(root->left);
        flatten(right);

    }
};